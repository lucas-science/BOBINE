name: Build Windows (Tauri v2)

on:
  workflow_dispatch:
  push:
    branches: [ windows_build ]
  pull_request:
    branches: [ windows_build ]

jobs:
  build-windows:
    name: Build Tauri Windows Bundle
    runs-on: windows-latest
    env:
      NODE_OPTIONS: --max-old-space-size=4096
      NEXT_TELEMETRY_DISABLED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Node + cache
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Cache Next.js
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          key: nextjs-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            nextjs-${{ runner.os }}-

      - name: Install frontend deps
        run: npm ci --prefer-offline --no-audit

      - name: Build Next.js
        run: npm run build

      # Rust (MSVC) + cache
      - name: Setup Rust (MSVC)
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-

      # Cache pour PyInstaller build
      - name: Cache PyInstaller Build
        uses: actions/cache@v4
        with:
          path: |
            src-tauri/python-runtime
            ~/.cache/pip
          key: win-pyinstaller-v2-${{ runner.os }}-${{ hashFiles('src-tauri/python-runtime/requirements.txt', 'src-tauri/python-scripts/main.spec') }}
          restore-keys: |
            win-pyinstaller-v2-${{ runner.os }}-

      # Setup Python temporaire pour compilation
      - name: Setup Python for compilation
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      # Compiler le code Python en executable avec corrections
# Compiler avec installation forcée de toutes les dépendances
      - name: Compile Python to executable (Force Dependencies)
        shell: powershell
        run: |
          # Installer PyInstaller et dépendances avec versions spécifiques
          python -m pip install --upgrade pip
          python -m pip install "pyinstaller==5.13.2"
          
          # FORCER l'installation de toutes les dépendances critiques une par une
          python -m pip install pytz --force-reinstall
          python -m pip install python-dateutil --force-reinstall
          python -m pip install six --force-reinstall
          python -m pip install packaging --force-reinstall
          python -m pip install numpy --force-reinstall
          python -m pip install pandas --force-reinstall
          python -m pip install openpyxl --force-reinstall
          python -m pip install matplotlib --force-reinstall
          python -m pip install pillow --force-reinstall
          
          # Installer le reste des requirements
          python -m pip install -r src-tauri/python-runtime/requirements.txt
          
          # Vérifier que TOUT est bien installé
          python -c "
          import sys
          print('Python path:', sys.path)
          
          print('Testing critical imports...')
          import pytz
          print('✓ pytz version:', pytz.__version__)
          
          import dateutil
          print('✓ dateutil version:', dateutil.__version__)
          
          import pandas as pd
          print('✓ pandas version:', pd.__version__)
          
          import numpy as np  
          print('✓ numpy version:', np.__version__)
          
          # Test complet pandas avec pytz
          import pandas as pd
          df = pd.DataFrame({'date': ['2023-01-01', '2023-01-02']})
          df['date'] = pd.to_datetime(df['date'])
          df_tz = df['date'].dt.tz_localize('UTC').dt.tz_convert('Europe/Paris')
          print('✓ Pandas timezone conversion works')
          
          print('All dependencies verified successfully!')
          "
          
          # Créer le répertoire de destination
          New-Item -ItemType Directory -Force -Path "src-tauri\python-runtime" | Out-Null
          
          # Lister tous les packages installés pour debug
          python -m pip list | findstr -i "pytz\|pandas\|numpy\|dateutil"
          
          # Compiler avec PyInstaller
          cd src-tauri/python-scripts
          Write-Host "[INFO] Compiling with ultra-robust spec..."
          
          # Alternative : compilation directe avec tous les modules forcés
          python -m PyInstaller --onefile --console `
            --name data_processor `
            --collect-all pandas `
            --collect-all pytz `
            --collect-all dateutil `
            --collect-all numpy `
            --collect-all openpyxl `
            --hidden-import=pytz `
            --hidden-import=dateutil `
            --hidden-import=dateutil.tz `
            --hidden-import=pandas `
            --hidden-import=numpy `
            --hidden-import=secrets `
            --hidden-import=context `
            --hidden-import=pignat `
            --hidden-import=chromeleon_online `
            --hidden-import=chromeleon_offline `
            --hidden-import=chromeleon_online_permanent `
            --hidden-import=resume `
            main.py
          
          # Vérifier que la compilation a réussi
          if (Test-Path "dist\data_processor.exe") {
            Move-Item -Force "dist\data_processor.exe" "..\python-runtime\data_processor.exe"
            Write-Host "[OK] Executable compiled and moved successfully"
            
            $sizeBytes = (Get-Item "..\python-runtime\data_processor.exe").Length
            $sizeMB = $sizeBytes / 1MB
            $sizeRounded = [math]::Round($sizeMB, 2)
            Write-Host "[INFO] Final executable size: $sizeRounded MB"
            
          } else {
            Write-Host "[ERROR] Compilation failed - executable not found"
            Get-ChildItem "dist" -ErrorAction SilentlyContinue
            throw "Compilation failed"
          }
          
          # Nettoyage
          Remove-Item -Recurse -Force "build", "dist", "__pycache__" -ErrorAction SilentlyContinue
      # Test plus robuste de l'executable
      - name: Test compiled executable
        shell: powershell
        run: |
          $exe = "src-tauri\python-runtime\data_processor.exe"
          if (-Not (Test-Path $exe)) { 
            throw "Compiled executable not found" 
          }
          
          Write-Host "[OK] Executable compiled successfully: $exe"
          $sizeBytes = (Get-Item $exe).Length
          $sizeMB = $sizeBytes / 1MB
          $sizeRounded = [math]::Round($sizeMB, 2)
          Write-Host "[INFO] Executable size: $sizeRounded MB"
          
          # Test que l'executable se lance sans erreurs d'import
          try {
            $process = Start-Process -FilePath $exe -ArgumentList "TEST_LAUNCH" -Wait -PassThru -WindowStyle Hidden -RedirectStandardOutput "test_output.txt" -RedirectStandardError "test_error.txt"
            
            # Vérifier que le processus s'est lancé (peu importe le code de sortie)
            if ($process.HasExited) {
              Write-Host "[OK] Executable launches successfully (exit code: $($process.ExitCode))"
              
              # Afficher le contenu pour debug si nécessaire
              if (Test-Path "test_error.txt") {
                $errorContent = Get-Content "test_error.txt" -Raw -ErrorAction SilentlyContinue
                if ($errorContent -and $errorContent.Trim()) {
                  # Si l'erreur contient "ModuleNotFoundError", c'est un problème
                  if ($errorContent -match "ModuleNotFoundError") {
                    Write-Host "[ERROR] Module import error detected:"
                    Write-Host $errorContent
                    throw "Critical import error in executable"
                  } else {
                    Write-Host "[INFO] Non-critical error output: $errorContent"
                  }
                }
              }
              
              # Nettoyer les fichiers de test
              Remove-Item "test_output.txt", "test_error.txt" -ErrorAction SilentlyContinue
              
            } else {
              throw "Executable process did not complete"
            }
            
          } catch {
            Write-Host "[ERROR] Executable test failed: $_"
            # Afficher les logs d'erreur si disponibles
            if (Test-Path "test_error.txt") {
              $errorContent = Get-Content "test_error.txt" -Raw -ErrorAction SilentlyContinue
              if ($errorContent) {
                Write-Host "[ERROR] Error output: $errorContent"
              }
            }
            throw "Executable test failed: $_"
          }

      # Build avec l'action officielle Tauri
      - name: Build Tauri App (official action)
        uses: tauri-apps/tauri-action@v0
        
      # Exporter les artefacts
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-bundles
          path: src-tauri/target/release/bundle/**
