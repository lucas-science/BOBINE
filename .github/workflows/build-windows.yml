name: Build Windows (Tauri v2)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-windows:
    name: Build Tauri Windows Bundle
    runs-on: windows-latest
    env:
      NODE_OPTIONS: --max-old-space-size=4096
      NEXT_TELEMETRY_DISABLED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Node + cache
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Cache Next.js
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          key: nextjs-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            nextjs-${{ runner.os }}-

      - name: Install frontend deps
        run: npm ci --prefer-offline --no-audit

      - name: Build Next.js
        run: npm run build

      # Rust (MSVC) + cache
      - name: Setup Rust (MSVC)
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-

      # Cache pour PyInstaller build
      - name: Cache PyInstaller Build
        uses: actions/cache@v4
        with:
          path: |
            src-tauri/python-runtime
            ~/.cache/pip
          key: win-pyinstaller-${{ runner.os }}-${{ hashFiles('src-tauri/python-runtime/requirements.txt', 'src-tauri/python-scripts/main.spec') }}
          restore-keys: |
            win-pyinstaller-${{ runner.os }}-

      # Setup Python temporaire pour compilation
      - name: Setup Python for compilation
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      # Compiler le code Python en executable
      - name: Compile Python to executable
        shell: powershell
        run: |
          # Installer PyInstaller et dépendances
          python -m pip install --upgrade pip
          python -m pip install pyinstaller
          python -m pip install -r src-tauri/python-runtime/requirements.txt
          
          # Créer le répertoire de destination
          New-Item -ItemType Directory -Force -Path "src-tauri\python-runtime" | Out-Null
          
          # Compiler avec PyInstaller (mode compatible)
          cd src-tauri/python-scripts
          python -m PyInstaller main.spec --clean --noconfirm
          
          # Vérifier que la compilation a réussi et déplacer l'executable
          if (Test-Path "dist\data_processor.exe") {
            Move-Item -Force "dist\data_processor.exe" "..\python-runtime\data_processor.exe"
            Write-Host "[OK] Executable moved successfully"
          } else {
            Write-Host "[ERROR] PyInstaller compilation failed - executable not found"
            Get-ChildItem "dist" -ErrorAction SilentlyContinue | ForEach-Object { Write-Host "Found in dist: $($_.Name)" }
            throw "PyInstaller compilation failed"
          }
          
          # Nettoyage des fichiers temporaires
          Remove-Item -Recurse -Force "build", "dist", "__pycache__" -ErrorAction SilentlyContinue

      # Vérifier l'executable compilé
      - name: Verify compiled executable
        shell: powershell
        run: |
          $exe = "src-tauri\python-runtime\data_processor.exe"
          if (-Not (Test-Path $exe)) { 
            throw "Compiled executable not found" 
          }
          
          Write-Host "[OK] Executable compiled successfully: $exe"
          $sizeBytes = (Get-Item $exe).Length
          $sizeMB = $sizeBytes / 1MB
          $sizeRounded = [math]::Round($sizeMB, 2)
          Write-Host "[INFO] Executable size: $sizeRounded MB"
          
          # Test rapide de l'executable
          Write-Host "[INFO] Testing executable..."
          try {
            $testOutput = & $exe "CONTEXT_IS_CORRECT" "test" 2>&1
            if ($LASTEXITCODE -eq 0) {
              Write-Host "[OK] Executable test passed"
            } else {
              Write-Host "[NOTE] Executable responds but returns error (expected for test path)"
              Write-Host "[DEBUG] Output: $testOutput"
            }
          } catch {
            Write-Host "[ERROR] Executable test failed: $_"
            Write-Host "[INFO] This may be expected for missing test data"
          }

      # Build avec l'action officielle Tauri
      - name: Build Tauri App (official action)
        uses: tauri-apps/tauri-action@v0
        
      # Exporter les artefacts
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-bundles
          path: src-tauri/target/release/bundle/**
