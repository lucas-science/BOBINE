name: Build Windows (Tauri v2)

on:
  workflow_dispatch:
  push:
    branches: [ main ]


jobs:
  build-windows:
    name: Build Tauri Windows Bundle
    runs-on: windows-latest
    env:
      NODE_OPTIONS: --max-old-space-size=4096
      NEXT_TELEMETRY_DISABLED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Node + cache
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Cache Next.js
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          key: nextjs-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            nextjs-${{ runner.os }}-

      - name: Install frontend deps
        run: npm ci --prefer-offline --no-audit

      - name: Build Next.js
        run: npm run build

      # Rust (MSVC) + cache
      - name: Setup Rust (MSVC)
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-

      # Cache pour PyInstaller build
      - name: Cache PyInstaller Build
        uses: actions/cache@v4
        with:
          path: |
            src-tauri/python-runtime
            ~/.cache/pip
          key: win-pyinstaller-v4-${{ runner.os }}-${{ hashFiles('src-tauri/python-runtime/requirements.txt', 'src-tauri/python-scripts/main.spec') }}
          restore-keys: |
            win-pyinstaller-v4-${{ runner.os }}-

      # Setup Python temporaire pour compilation
      - name: Setup Python for compilation
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      # Compiler avec installation forcée
      - name: Compile Python to executable
        shell: powershell
        run: |
          # Installer PyInstaller et dépendances
          python -m pip install --upgrade pip
          python -m pip install "pyinstaller==5.13.2"
          
          # FORCER l'installation des dépendances critiques
          python -m pip install pytz --force-reinstall
          python -m pip install python-dateutil --force-reinstall
          python -m pip install six --force-reinstall
          python -m pip install packaging --force-reinstall
          python -m pip install numpy --force-reinstall
          python -m pip install pandas --force-reinstall
          python -m pip install openpyxl --force-reinstall
          python -m pip install matplotlib --force-reinstall
          python -m pip install pillow --force-reinstall
          
          # Installer le reste
          python -m pip install -r src-tauri/python-runtime/requirements.txt
          
          # Créer un fichier de test temporaire (syntaxe PowerShell correcte)
          $testScript = @'
          import sys
          print("Python path:", sys.path)
          
          print("Testing critical imports...")
          import pytz
          print("pytz version:", pytz.__version__)
          
          import dateutil
          print("dateutil version:", dateutil.__version__)
          
          import pandas as pd
          print("pandas version:", pd.__version__)
          
          import numpy as np
          print("numpy version:", np.__version__)
          
          # Test pandas avec pytz
          df = pd.DataFrame({"date": ["2023-01-01", "2023-01-02"]})
          df["date"] = pd.to_datetime(df["date"])
          df_tz = df["date"].dt.tz_localize("UTC").dt.tz_convert("Europe/Paris")
          print("Pandas timezone conversion works")
          
          # Test du mode interactif
          import sys
          if "--interactive" in sys.argv:
              print("Interactive mode detected - ready for stdin commands")
          
          print("All dependencies verified successfully")
          '@
          
          $testScript | Out-File -FilePath "test_deps.py" -Encoding UTF8
          
          # Exécuter le test
          python test_deps.py
          
          # Créer le répertoire de destination
          New-Item -ItemType Directory -Force -Path "src-tauri\python-runtime" | Out-Null
          
          # Lister les packages pour debug
          python -m pip list | findstr -i "pytz pandas numpy dateutil"
          
          # Compiler
          cd src-tauri/python-scripts
          Write-Host "[INFO] Compiling with forced dependencies..."
          
          python -m PyInstaller --onefile --noconsole `
            --name data_processor `
            --collect-all pandas `
            --collect-all pytz `
            --collect-all dateutil `
            --collect-all numpy `
            --collect-all openpyxl `
            --hidden-import=pytz `
            --hidden-import=dateutil `
            --hidden-import=dateutil.tz `
            --hidden-import=pandas `
            --hidden-import=numpy `
            --hidden-import=secrets `
            --hidden-import=context `
            --hidden-import=pignat `
            --hidden-import=chromeleon_online `
            --hidden-import=chromeleon_offline `
            --hidden-import=chromeleon_online_permanent `
            --hidden-import=resume `
            main.py
          
          # Vérifier et déplacer
          if (Test-Path "dist\data_processor.exe") {
            Move-Item -Force "dist\data_processor.exe" "..\python-runtime\data_processor.exe"
            Write-Host "[OK] Executable compiled successfully"
            
            $sizeBytes = (Get-Item "..\python-runtime\data_processor.exe").Length
            $sizeMB = $sizeBytes / 1MB
            $sizeRounded = [math]::Round($sizeMB, 2)
            Write-Host "[INFO] Final executable size: $sizeRounded MB"
            Write-Host "[OK] Python executable compiled successfully with interactive mode support"
            
          } else {
            Write-Host "[ERROR] Compilation failed"
            Get-ChildItem "dist" -ErrorAction SilentlyContinue
            throw "Compilation failed"
          }
          
          # Nettoyage
          Remove-Item -Recurse -Force "build", "dist", "__pycache__" -ErrorAction SilentlyContinue
          Remove-Item "test_deps.py" -ErrorAction SilentlyContinue

      # Build avec l'action officielle Tauri
      - name: Build Tauri App (official action)
        uses: tauri-apps/tauri-action@v0
        
      # Exporter les artefacts
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-bundles
          path: src-tauri/target/release/bundle/**
